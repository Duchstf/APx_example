-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unpackTrackZs is
port (
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (95 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (95 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of unpackTrackZs is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_logic_0 : STD_LOGIC := '0';



begin



    ap_ready <= ap_const_logic_1;
    ap_return_0 <= p_read(54 downto 43);
    ap_return_1 <= p_read1(54 downto 43);
    ap_return_10 <= p_read10(54 downto 43);
    ap_return_11 <= p_read11(54 downto 43);
    ap_return_12 <= p_read12(54 downto 43);
    ap_return_13 <= p_read13(54 downto 43);
    ap_return_14 <= p_read14(54 downto 43);
    ap_return_15 <= p_read15(54 downto 43);
    ap_return_16 <= p_read16(54 downto 43);
    ap_return_17 <= p_read17(54 downto 43);
    ap_return_2 <= p_read2(54 downto 43);
    ap_return_3 <= p_read3(54 downto 43);
    ap_return_4 <= p_read4(54 downto 43);
    ap_return_5 <= p_read5(54 downto 43);
    ap_return_6 <= p_read6(54 downto 43);
    ap_return_7 <= p_read7(54 downto 43);
    ap_return_8 <= p_read8(54 downto 43);
    ap_return_9 <= p_read9(54 downto 43);
end behav;
