-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getMET is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Px_V_dout : IN STD_LOGIC_VECTOR (18 downto 0);
    Px_V_empty_n : IN STD_LOGIC;
    Px_V_read : OUT STD_LOGIC;
    Py_V_dout : IN STD_LOGIC_VECTOR (18 downto 0);
    Py_V_empty_n : IN STD_LOGIC;
    Py_V_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of getMET is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Px_V_blk_n : STD_LOGIC;
    signal Py_V_blk_n : STD_LOGIC;
    signal Px_V_read_reg_261 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal Py_V_read_reg_267 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_fu_249_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_6_reg_273 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_7_fu_255_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_7_reg_278 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_4_fu_110_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_4_reg_283 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_5_fu_120_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_V_5_reg_288 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_generic_atan2_fu_93_ap_ready : STD_LOGIC;
    signal grp_generic_atan2_fu_93_ap_done : STD_LOGIC;
    signal grp_generic_atan2_fu_93_ap_return : STD_LOGIC_VECTOR (50 downto 0);
    signal p_Val2_9_reg_298 : STD_LOGIC_VECTOR (50 downto 0);
    signal trunc_ln718_fu_152_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln718_reg_305 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_14_fu_204_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_14_reg_310 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sqrt_fixed_31_23_s_fu_88_x_V : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_sqrt_fixed_31_23_s_fu_88_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_generic_atan2_fu_93_ap_start : STD_LOGIC;
    signal grp_generic_atan2_fu_93_ap_idle : STD_LOGIC;
    signal grp_generic_atan2_fu_93_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln1118_fu_107_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_1_fu_117_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal Px2_V_fu_127_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal Py2_V_fu_136_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_fu_156_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_13_fu_165_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln415_fu_200_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_214_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal overflow_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_210_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_s_fu_230_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_6_fu_249_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_101_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_6_fu_249_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_7_fu_255_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_2_fu_104_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal r_V_7_fu_255_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component sqrt_fixed_31_23_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component generic_atan2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in1_V : IN STD_LOGIC_VECTOR (19 downto 0);
        in2_V : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component metalgo_mul_mul_1fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    grp_sqrt_fixed_31_23_s_fu_88 : component sqrt_fixed_31_23_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x_V => grp_sqrt_fixed_31_23_s_fu_88_x_V,
        ap_return => grp_sqrt_fixed_31_23_s_fu_88_ap_return);

    grp_generic_atan2_fu_93 : component generic_atan2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_atan2_fu_93_ap_start,
        ap_done => grp_generic_atan2_fu_93_ap_done,
        ap_idle => grp_generic_atan2_fu_93_ap_idle,
        ap_ready => grp_generic_atan2_fu_93_ap_ready,
        in1_V => r_V_4_reg_283,
        in2_V => r_V_5_reg_288,
        ap_return => grp_generic_atan2_fu_93_ap_return);

    metalgo_mul_mul_1fYi_U72 : component metalgo_mul_mul_1fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 38)
    port map (
        din0 => r_V_6_fu_249_p0,
        din1 => r_V_6_fu_249_p1,
        dout => r_V_6_fu_249_p2);

    metalgo_mul_mul_1fYi_U73 : component metalgo_mul_mul_1fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 19,
        dout_WIDTH => 38)
    port map (
        din0 => r_V_7_fu_255_p0,
        din1 => r_V_7_fu_255_p1,
        dout => r_V_7_fu_255_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_0_preg <= p_Val2_s_fu_230_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_1_preg <= p_Val2_14_reg_310;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_atan2_fu_93_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_atan2_fu_93_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_generic_atan2_fu_93_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_atan2_fu_93_ap_ready = ap_const_logic_1)) then 
                    grp_generic_atan2_fu_93_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Py_V_empty_n) or (ap_const_logic_0 = Px_V_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Px_V_read_reg_261 <= Px_V_dout;
                Py_V_read_reg_267 <= Py_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Val2_14_reg_310 <= p_Val2_14_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_generic_atan2_fu_93_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Val2_9_reg_298 <= grp_generic_atan2_fu_93_ap_return;
                trunc_ln718_reg_305 <= trunc_ln718_fu_152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_4_reg_283 <= r_V_4_fu_110_p2;
                r_V_5_reg_288 <= r_V_5_fu_120_p2;
                r_V_6_reg_273 <= r_V_6_fu_249_p2;
                r_V_7_reg_278 <= r_V_7_fu_255_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, Px_V_empty_n, Py_V_empty_n, ap_CS_fsm_state3, grp_generic_atan2_fu_93_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Py_V_empty_n) or (ap_const_logic_0 = Px_V_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_generic_atan2_fu_93_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Px2_V_fu_127_p4 <= r_V_6_reg_273(37 downto 8);

    Px_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Px_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Px_V_blk_n <= Px_V_empty_n;
        else 
            Px_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Px_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Px_V_empty_n, Py_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Py_V_empty_n) or (ap_const_logic_0 = Px_V_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Px_V_read <= ap_const_logic_1;
        else 
            Px_V_read <= ap_const_logic_0;
        end if; 
    end process;

    Py2_V_fu_136_p4 <= r_V_7_reg_278(37 downto 8);

    Py_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Py_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Py_V_blk_n <= Py_V_empty_n;
        else 
            Py_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Py_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, Px_V_empty_n, Py_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Py_V_empty_n) or (ap_const_logic_0 = Px_V_empty_n) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Py_V_read <= ap_const_logic_1;
        else 
            Py_V_read <= ap_const_logic_0;
        end if; 
    end process;

    and_ln415_fu_194_p2 <= (tmp_48_fu_187_p3 and or_ln412_fu_181_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, Px_V_empty_n, Py_V_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = Py_V_empty_n) or (ap_const_logic_0 = Px_V_empty_n) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state22, p_Val2_s_fu_230_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_0 <= p_Val2_s_fu_230_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(p_Val2_14_reg_310, ap_CS_fsm_state22, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return_1 <= p_Val2_14_reg_310;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    grp_generic_atan2_fu_93_ap_start <= grp_generic_atan2_fu_93_ap_start_reg;
    grp_sqrt_fixed_31_23_s_fu_88_x_V <= std_logic_vector(unsigned(Px2_V_fu_127_p4) + unsigned(Py2_V_fu_136_p4));
    or_ln412_fu_181_p2 <= (tmp_47_fu_169_p3 or r_fu_176_p2);
    overflow_fu_224_p2 <= "0" when (tmp_fu_214_p4 = ap_const_lv3_0) else "1";
    p_Val2_12_fu_210_p1 <= grp_sqrt_fixed_31_23_s_fu_88_ap_return(17 - 1 downto 0);
        p_Val2_13_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_156_p4),18));

    p_Val2_14_fu_204_p2 <= std_logic_vector(signed(p_Val2_13_fu_165_p1) + signed(zext_ln415_fu_200_p1));
    p_Val2_s_fu_230_p3 <= 
        ap_const_lv17_1FFFF when (overflow_fu_224_p2(0) = '1') else 
        p_Val2_12_fu_210_p1;
        r_V_2_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Py_V_read_reg_267),38));

    r_V_4_fu_110_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(sext_ln1118_fu_107_p1));
    r_V_5_fu_120_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(sext_ln1118_1_fu_117_p1));
    r_V_6_fu_249_p0 <= r_V_fu_101_p1(19 - 1 downto 0);
    r_V_6_fu_249_p1 <= r_V_fu_101_p1(19 - 1 downto 0);
    r_V_7_fu_255_p0 <= r_V_2_fu_104_p1(19 - 1 downto 0);
    r_V_7_fu_255_p1 <= r_V_2_fu_104_p1(19 - 1 downto 0);
        r_V_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Px_V_read_reg_261),38));

    r_fu_176_p2 <= "0" when (trunc_ln718_reg_305 = ap_const_lv33_0) else "1";
        sext_ln1118_1_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Px_V_read_reg_261),20));

        sext_ln1118_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Py_V_read_reg_267),20));

    tmp_47_fu_169_p3 <= p_Val2_9_reg_298(34 downto 34);
    tmp_48_fu_187_p3 <= p_Val2_9_reg_298(33 downto 33);
    tmp_fu_214_p4 <= grp_sqrt_fixed_31_23_s_fu_88_ap_return(19 downto 17);
    trunc_ln718_fu_152_p1 <= grp_generic_atan2_fu_93_ap_return(33 - 1 downto 0);
    trunc_ln_fu_156_p4 <= p_Val2_9_reg_298(50 downto 34);
    zext_ln415_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_194_p2),18));
end behav;
